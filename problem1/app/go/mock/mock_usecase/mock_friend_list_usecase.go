// Code generated by MockGen. DO NOT EDIT.
// Source: friend_list_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	model "problem1/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockFriendListUseCase is a mock of FriendListUseCase interface.
type MockFriendListUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFriendListUseCaseMockRecorder
}

// MockFriendListUseCaseMockRecorder is the mock recorder for MockFriendListUseCase.
type MockFriendListUseCaseMockRecorder struct {
	mock *MockFriendListUseCase
}

// NewMockFriendListUseCase creates a new mock instance.
func NewMockFriendListUseCase(ctrl *gomock.Controller) *MockFriendListUseCase {
	mock := &MockFriendListUseCase{ctrl: ctrl}
	mock.recorder = &MockFriendListUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendListUseCase) EXPECT() *MockFriendListUseCaseMockRecorder {
	return m.recorder
}

// GetFriendListByUserId mocks base method.
func (m *MockFriendListUseCase) GetFriendListByUserId(c echo.Context) (*model.FriendList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendListByUserId", c)
	ret0, _ := ret[0].(*model.FriendList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendListByUserId indicates an expected call of GetFriendListByUserId.
func (mr *MockFriendListUseCaseMockRecorder) GetFriendListByUserId(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendListByUserId", reflect.TypeOf((*MockFriendListUseCase)(nil).GetFriendListByUserId), c)
}

// GetFriendListOfFriendsByUserId mocks base method.
func (m *MockFriendListUseCase) GetFriendListOfFriendsByUserId(c echo.Context) (*model.FriendList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendListOfFriendsByUserId", c)
	ret0, _ := ret[0].(*model.FriendList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendListOfFriendsByUserId indicates an expected call of GetFriendListOfFriendsByUserId.
func (mr *MockFriendListUseCaseMockRecorder) GetFriendListOfFriendsByUserId(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendListOfFriendsByUserId", reflect.TypeOf((*MockFriendListUseCase)(nil).GetFriendListOfFriendsByUserId), c)
}

// GetFriendListOfFriendsByUserIdWithPaging mocks base method.
func (m *MockFriendListUseCase) GetFriendListOfFriendsByUserIdWithPaging(c echo.Context) (*model.FriendList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendListOfFriendsByUserIdWithPaging", c)
	ret0, _ := ret[0].(*model.FriendList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendListOfFriendsByUserIdWithPaging indicates an expected call of GetFriendListOfFriendsByUserIdWithPaging.
func (mr *MockFriendListUseCaseMockRecorder) GetFriendListOfFriendsByUserIdWithPaging(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendListOfFriendsByUserIdWithPaging", reflect.TypeOf((*MockFriendListUseCase)(nil).GetFriendListOfFriendsByUserIdWithPaging), c)
}

// PostUserLink mocks base method.
func (m *MockFriendListUseCase) PostUserLink(ulfr *model.UserLinkForRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostUserLink", ulfr)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostUserLink indicates an expected call of PostUserLink.
func (mr *MockFriendListUseCaseMockRecorder) PostUserLink(ulfr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostUserLink", reflect.TypeOf((*MockFriendListUseCase)(nil).PostUserLink), ulfr)
}
